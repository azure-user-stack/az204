# ============================================
# GitHub Actions - CI/CD Pipeline
# Flask Incidents R√©seau - D√©ploiement automatique
# ============================================

name: Build and Deploy to Azure Container Instances

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY_LOGIN_SERVER: ${{ secrets.REGISTRY_LOGIN_SERVER }}
  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  CONTAINER_INSTANCE_NAME: flask-incidents-app
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    # ============================================
    # CHECKOUT ET SETUP
    # ============================================
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # ============================================
    # AZURE LOGIN
    # ============================================
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_LOGIN_SERVER }}
        username: ${{ env.REGISTRY_USERNAME }}
        password: ${{ env.REGISTRY_PASSWORD }}

    # ============================================
    # BUILD ET PUSH IMAGE DOCKER
    # ============================================
    - name: Build Docker image
      run: |
        docker build \
          --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
          --build-arg VCS_REF=${{ github.sha }} \
          --build-arg VERSION=${{ env.IMAGE_TAG }} \
          -t ${{ env.REGISTRY_LOGIN_SERVER }}/flask-incidents:${{ env.IMAGE_TAG }} \
          -t ${{ env.REGISTRY_LOGIN_SERVER }}/flask-incidents:latest \
          .

    - name: Push Docker image
      run: |
        docker push ${{ env.REGISTRY_LOGIN_SERVER }}/flask-incidents:${{ env.IMAGE_TAG }}
        docker push ${{ env.REGISTRY_LOGIN_SERVER }}/flask-incidents:latest

    # ============================================
    # TESTS DE S√âCURIT√â (optionnel)
    # ============================================
    - name: Run security scan
      continue-on-error: true
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $PWD:/tmp/.cache/ aquasec/trivy \
          image --exit-code 0 --no-progress --format table \
          ${{ env.REGISTRY_LOGIN_SERVER }}/flask-incidents:latest

    # ============================================
    # D√âPLOIEMENT AZURE CONTAINER INSTANCES
    # ============================================
    - name: Deploy to Azure Container Instances
      uses: azure/aci-deploy@v1
      with:
        resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
        dns-name-label: flask-incidents-${{ github.run_number }}
        image: ${{ env.REGISTRY_LOGIN_SERVER }}/flask-incidents:${{ env.IMAGE_TAG }}
        name: ${{ env.CONTAINER_INSTANCE_NAME }}
        location: 'West Europe'
        cpu: 1
        memory: 1.5
        environment-variables: |
          FLASK_ENV=production
          FLASK_DEBUG=False
          PORT=80
        secure-environment-variables: |
          FLASK_SECRET_KEY=${{ secrets.FLASK_SECRET_KEY }}
        ports: 80
        restart-policy: Always

    # ============================================
    # TESTS DE SANT√â POST-D√âPLOIEMENT
    # ============================================
    - name: Wait for deployment
      run: sleep 60

    - name: Health check
      run: |
        FQDN=$(az container show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.CONTAINER_INSTANCE_NAME }} \
          --query ipAddress.fqdn \
          --output tsv)
        
        echo "Testing health endpoint: http://$FQDN/health"
        
        for i in {1..5}; do
          if curl -f "http://$FQDN/health"; then
            echo "‚úÖ Health check passed"
            break
          else
            echo "‚ùå Health check failed (attempt $i/5)"
            if [ $i -eq 5 ]; then exit 1; fi
            sleep 10
          fi
        done

    - name: Display deployment info
      run: |
        echo "=== D√âPLOIEMENT R√âUSSI ==="
        FQDN=$(az container show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.CONTAINER_INSTANCE_NAME }} \
          --query ipAddress.fqdn \
          --output tsv)
        
        echo "üåê Application URL: http://$FQDN"
        echo "üìä Health Check: http://$FQDN/health"
        echo "‚ÑπÔ∏è  Container Info: http://$FQDN/info"
        echo "üìã Incidents API: http://$FQDN/api/incidents"

# ============================================
# SECRETS REQUIS DANS GITHUB
# ============================================
#
# Cr√©ez ces secrets dans Settings > Secrets and variables > Actions :
#
# AZURE_CREDENTIALS: 
#   Cr√©ez un service principal avec:
#   az ad sp create-for-rbac --name "github-actions" \
#     --role contributor \
#     --scopes /subscriptions/YOUR-SUBSCRIPTION-ID \
#     --sdk-auth
#
# REGISTRY_LOGIN_SERVER: votreregistry.azurecr.io
# REGISTRY_USERNAME: nom d'utilisateur du registre
# REGISTRY_PASSWORD: mot de passe du registre
# AZURE_RESOURCE_GROUP: nom de votre groupe de ressources
# FLASK_SECRET_KEY: cl√© secr√®te pour Flask (g√©n√©rez-en une s√©curis√©e)
#
# ============================================