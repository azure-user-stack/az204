#!/usr/bin/env python3
"""
Diagnostic pour Azure Blob Storage - Configuration et authentification
"""

import os
import sys
from datetime import datetime
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

def diagnose_azure_storage_config():
    """Diagnostiquer la configuration Azure Storage"""
    print("üîç DIAGNOSTIC AZURE BLOB STORAGE")
    print("=" * 60)
    print(f"‚è∞ Diagnostic effectu√© le: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # 1. V√©rifier les variables d'environnement
    print("üìã VARIABLES D'ENVIRONNEMENT:")
    print("-" * 40)
    
    storage_account_name = os.getenv('AZURE_STORAGE_ACCOUNT_NAME')
    storage_account_key = os.getenv('AZURE_STORAGE_ACCOUNT_KEY')
    storage_connection_string = os.getenv('AZURE_STORAGE_CONNECTION_STRING')
    container_name = os.getenv('AZURE_STORAGE_CONTAINER_NAME')
    
    print(f"AZURE_STORAGE_ACCOUNT_NAME: {storage_account_name}")
    print(f"AZURE_STORAGE_CONTAINER_NAME: {container_name}")
    
    if storage_account_key:
        if storage_account_key.startswith('https://'):
            print("‚ùå AZURE_STORAGE_ACCOUNT_KEY: ‚ö†Ô∏è  Contient une URL SAS (invalide)")
            print(f"   Valeur: {storage_account_key[:50]}...")
            print("   üí° Solution: Remplacez par une vraie cl√© de compte ou utilisez AZURE_STORAGE_CONNECTION_STRING")
        else:
            print("‚úÖ AZURE_STORAGE_ACCOUNT_KEY: Pr√©sent et semble valide")
            print(f"   Longueur: {len(storage_account_key)} caract√®res")
    else:
        print("‚ùå AZURE_STORAGE_ACCOUNT_KEY: Non d√©fini")
    
    if storage_connection_string:
        print("‚úÖ AZURE_STORAGE_CONNECTION_STRING: Pr√©sent")
        print(f"   Longueur: {len(storage_connection_string)} caract√®res")
    else:
        print("‚ùå AZURE_STORAGE_CONNECTION_STRING: Non d√©fini")
    
    print()
    
    # 2. Analyser le type de configuration
    print("üîß ANALYSE DE LA CONFIGURATION:")
    print("-" * 40)
    
    if storage_account_key and storage_account_key.startswith('https://'):
        print("‚ùå PROBL√àME D√âTECT√â:")
        print("   La variable AZURE_STORAGE_ACCOUNT_KEY contient une URL SAS")
        print("   au lieu d'une cl√© de compte de stockage.")
        print()
        print("üîß SOLUTIONS POSSIBLES:")
        print()
        print("OPTION 1 - Utiliser une cl√© de compte de stockage:")
        print("   1. Allez dans le portail Azure")
        print("   2. Ouvrez votre compte de stockage 'stappincidents'")
        print("   3. Allez dans 'Cl√©s d'acc√®s' (Access keys)")
        print("   4. Copiez une des cl√©s (key1 ou key2)")
        print("   5. Remplacez AZURE_STORAGE_ACCOUNT_KEY par cette cl√©")
        print()
        print("OPTION 2 - Utiliser une cha√Æne de connexion:")
        print("   1. Dans le portail Azure, compte de stockage > Cl√©s d'acc√®s")
        print("   2. Copiez la 'Cha√Æne de connexion' compl√®te")
        print("   3. D√©finissez AZURE_STORAGE_CONNECTION_STRING avec cette valeur")
        print("   4. Commentez ou supprimez AZURE_STORAGE_ACCOUNT_KEY")
        print()
        print("OPTION 3 - Utiliser un SAS Token (configuration avanc√©e):")
        print("   1. Modifiez le code pour utiliser un SAS token")
        print("   2. Configurez l'URL SAS correctement dans l'application")
        
    elif storage_connection_string:
        print("‚úÖ Configuration avec cha√Æne de connexion d√©tect√©e")
        if "AccountKey=" in storage_connection_string:
            print("   Type: Authentification par cl√©")
        else:
            print("   Type: Autre m√©thode d'authentification")
            
    elif storage_account_name and storage_account_key:
        print("‚úÖ Configuration avec nom de compte + cl√© d√©tect√©e")
        
    else:
        print("‚ùå Configuration incompl√®te")
        print("   Il manque des informations d'authentification")
    
    print()
    
    # 3. Test de configuration
    print("üß™ TEST DE CONFIGURATION:")
    print("-" * 40)
    
    try:
        from azure.storage.blob import BlobServiceClient
        print("‚úÖ Module azure.storage.blob import√© avec succ√®s")
        
        # Tenter de cr√©er un client
        if storage_connection_string:
            print("üîÑ Test avec cha√Æne de connexion...")
            try:
                client = BlobServiceClient.from_connection_string(storage_connection_string)
                print("‚úÖ Client BlobServiceClient cr√©√© via connection string")
            except Exception as e:
                print(f"‚ùå Erreur avec connection string: {e}")
                
        elif storage_account_name and storage_account_key and not storage_account_key.startswith('https://'):
            print("üîÑ Test avec nom de compte + cl√©...")
            try:
                account_url = f"https://{storage_account_name}.blob.core.windows.net"
                client = BlobServiceClient(account_url=account_url, credential=storage_account_key)
                print("‚úÖ Client BlobServiceClient cr√©√© via account key")
            except Exception as e:
                print(f"‚ùå Erreur avec account key: {e}")
                
        else:
            print("‚ùå Configuration insuffisante pour cr√©er un client")
            
    except ImportError as e:
        print(f"‚ùå Erreur d'import Azure Storage: {e}")
        print("   üí° Ex√©cutez: pip install azure-storage-blob")
    
    print()
    print("=" * 60)
    print("‚úÖ Diagnostic termin√©")

if __name__ == "__main__":
    diagnose_azure_storage_config()